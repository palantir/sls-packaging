apply plugin: 'com.gradle.plugin-publish'
// java-gradle-plugin MUST be applied before publish-jar.gradle
apply plugin: 'java-gradle-plugin'
apply plugin: 'com.palantir.external-publish-jar'
apply plugin: 'groovy'
apply plugin: 'org.inferred.processors'
apply plugin: 'de.undercouch.download'

dependencies {
    compileOnly 'com.palantir.gradle.consistentversions:gradle-consistent-versions'
    testRuntimeOnly 'com.palantir.gradle.consistentversions:gradle-consistent-versions'

    api gradleApi()
    api project(':gradle-recommended-product-dependencies')
    api 'com.google.guava:guava'
    api 'com.fasterxml.jackson.core:jackson-databind'
    api 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    api "com.fasterxml.jackson.datatype:jackson-datatype-guava"
    api 'com.palantir.safe-logging:preconditions'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-guava'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'

    compileOnly 'org.immutables:value::annotations'
    annotationProcessor 'org.immutables:value'

    testImplementation gradleTestKit()
    testImplementation 'com.netflix.nebula:nebula-test'
    testImplementation 'org.awaitility:awaitility'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
}

pluginBundle {
    website = 'https://github.com/palantir/sls-packaging'
    vcsUrl = 'https://github.com/palantir/sls-packaging'
    description = 'Creates a distributable package containing libraries and scripts necessary to easily deploy and run a Java project.'
    tags = ['distribution', 'application']

    plugins {
        javaServiceDistributionPlugin {
            id = 'com.palantir.sls-java-service-distribution'
            displayName = 'Creates SLS Java services distributions'
        }
        assetDistributionPlugin {
            id = 'com.palantir.sls-asset-distribution'
            displayName = 'Creates SLS asset distributions'
        }
    }
}

publishPlugins.onlyIf {
    project.version ==~ /[0-9]+(\.[0-9]+)+(-rc[0-9]+)?(-alpha[0-9]+)?/
}

test {
    maxHeapSize = '1g'
}

// Configure the publishPlugins task
tasks.publish.dependsOn publishPlugins
project.ext.'gradle.publish.key' = System.env["GRADLE_KEY"]
project.ext.'gradle.publish.secret' = System.env["GRADLE_SECRET"]
